// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ipsecvpntunnel.proto

package model

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// IPSecVpnTunnel is used to store definition of a sase config as a k8s CRD resource.
type IPSecVpnTunnel struct {
	// TunnelName
	TunnelName string `protobuf:"bytes,1,opt,name=tunnel_name,json=tunnelName,proto3" json:"tunnel_name,omitempty"`
	// Sase Service Instance Name
	ServiceInstanceName string `protobuf:"bytes,2,opt,name=service_instance_name,json=serviceInstanceName,proto3" json:"service_instance_name,omitempty"`
	// Tunnel Destination IP
	TunnelDestinationIp string `protobuf:"bytes,3,opt,name=tunnel_destination_ip,json=tunnelDestinationIp,proto3" json:"tunnel_destination_ip,omitempty"`
	// Tunnel Source IP
	TunnelSourceIp string `protobuf:"bytes,4,opt,name=tunnel_source_ip,json=tunnelSourceIp,proto3" json:"tunnel_source_ip,omitempty"`
	// Security Parameters for the tunnel
	SecurityAssociation string `protobuf:"bytes,5,opt,name=security_association,json=securityAssociation,proto3" json:"security_association,omitempty"`
	// Tunnel Interface IP Type
	InterfaceType string `protobuf:"bytes,6,opt,name=interface_type,json=interfaceType,proto3" json:"interface_type,omitempty"`
	// Tunnel Type
	TunnelType           string   `protobuf:"bytes,7,opt,name=tunnel_type,json=tunnelType,proto3" json:"tunnel_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPSecVpnTunnel) Reset()         { *m = IPSecVpnTunnel{} }
func (m *IPSecVpnTunnel) String() string { return proto.CompactTextString(m) }
func (*IPSecVpnTunnel) ProtoMessage()    {}
func (*IPSecVpnTunnel) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40b6333f3796605, []int{0}
}

func (m *IPSecVpnTunnel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPSecVpnTunnel.Unmarshal(m, b)
}
func (m *IPSecVpnTunnel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPSecVpnTunnel.Marshal(b, m, deterministic)
}
func (m *IPSecVpnTunnel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPSecVpnTunnel.Merge(m, src)
}
func (m *IPSecVpnTunnel) XXX_Size() int {
	return xxx_messageInfo_IPSecVpnTunnel.Size(m)
}
func (m *IPSecVpnTunnel) XXX_DiscardUnknown() {
	xxx_messageInfo_IPSecVpnTunnel.DiscardUnknown(m)
}

var xxx_messageInfo_IPSecVpnTunnel proto.InternalMessageInfo

func (m *IPSecVpnTunnel) GetTunnelName() string {
	if m != nil {
		return m.TunnelName
	}
	return ""
}

func (m *IPSecVpnTunnel) GetServiceInstanceName() string {
	if m != nil {
		return m.ServiceInstanceName
	}
	return ""
}

func (m *IPSecVpnTunnel) GetTunnelDestinationIp() string {
	if m != nil {
		return m.TunnelDestinationIp
	}
	return ""
}

func (m *IPSecVpnTunnel) GetTunnelSourceIp() string {
	if m != nil {
		return m.TunnelSourceIp
	}
	return ""
}

func (m *IPSecVpnTunnel) GetSecurityAssociation() string {
	if m != nil {
		return m.SecurityAssociation
	}
	return ""
}

func (m *IPSecVpnTunnel) GetInterfaceType() string {
	if m != nil {
		return m.InterfaceType
	}
	return ""
}

func (m *IPSecVpnTunnel) GetTunnelType() string {
	if m != nil {
		return m.TunnelType
	}
	return ""
}

func init() {
	proto.RegisterType((*IPSecVpnTunnel)(nil), "model.IPSecVpnTunnel")
}

func init() {
	proto.RegisterFile("ipsecvpntunnel.proto", fileDescriptor_a40b6333f3796605)
}

var fileDescriptor_a40b6333f3796605 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0x69, 0xb5, 0x15, 0x23, 0x2e, 0x12, 0x2b, 0xe4, 0xa6, 0x08, 0x42, 0x4f, 0x82, 0xfa,
	0x04, 0x82, 0x97, 0xbd, 0x88, 0xd8, 0xe2, 0x35, 0xc4, 0x74, 0x84, 0x81, 0xee, 0x64, 0x48, 0xb2,
	0x85, 0x7d, 0x39, 0x9f, 0x4d, 0x3a, 0x49, 0xed, 0x5e, 0xff, 0xef, 0xfb, 0x27, 0xe1, 0x57, 0x0b,
	0xe4, 0x04, 0x7e, 0xc7, 0x94, 0x7b, 0x22, 0xd8, 0x3e, 0x72, 0x0c, 0x39, 0xe8, 0x59, 0x17, 0x36,
	0xb0, 0xbd, 0xff, 0x9d, 0xaa, 0xa6, 0xfd, 0x58, 0x81, 0xff, 0x62, 0x5a, 0x0b, 0xd7, 0xb7, 0xea,
	0xa2, 0x98, 0x96, 0x5c, 0x07, 0x66, 0x72, 0x37, 0x59, 0x9e, 0x7f, 0xaa, 0x12, 0xbd, 0xbb, 0x0e,
	0xf4, 0xb3, 0xba, 0x49, 0x10, 0x77, 0xe8, 0xc1, 0x22, 0xa5, 0xec, 0xc8, 0x43, 0x51, 0xa7, 0xa2,
	0x5e, 0x57, 0xd8, 0x56, 0x76, 0xe8, 0xd4, 0xa3, 0x1b, 0x48, 0x19, 0xc9, 0x65, 0x0c, 0x64, 0x91,
	0xcd, 0x49, 0xe9, 0x14, 0xf8, 0x76, 0x64, 0x2d, 0xeb, 0xa5, 0xba, 0xaa, 0x9d, 0x14, 0xfa, 0xb8,
	0x7f, 0x8d, 0xcd, 0xa9, 0xe8, 0x4d, 0xc9, 0x57, 0x12, 0xb7, 0xac, 0x9f, 0xd4, 0x22, 0x81, 0xef,
	0x23, 0xe6, 0xc1, 0xba, 0x94, 0x82, 0x47, 0xb9, 0x61, 0x66, 0x87, 0x0f, 0x15, 0xf6, 0x7a, 0x44,
	0xfa, 0x41, 0x35, 0x48, 0x19, 0xe2, 0x8f, 0xf3, 0x60, 0xf3, 0xc0, 0x60, 0xe6, 0x22, 0x5f, 0xfe,
	0xa7, 0xeb, 0x81, 0x61, 0x34, 0x86, 0x38, 0x67, 0xe3, 0x31, 0xf6, 0xc2, 0xf7, 0x5c, 0xe6, 0x7c,
	0xf9, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xfd, 0xb7, 0x8f, 0x78, 0x66, 0x01, 0x00, 0x00,
}
