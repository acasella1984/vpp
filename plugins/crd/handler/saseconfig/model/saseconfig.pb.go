// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: saseconfig.proto

package model

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Sase Service Names
type SaseConfig_SaseService int32

const (
	SaseConfig_Firewall SaseConfig_SaseService = 0
	SaseConfig_Nat      SaseConfig_SaseService = 1
	SaseConfig_IpSec    SaseConfig_SaseService = 2
	SaseConfig_Route    SaseConfig_SaseService = 3
)

var SaseConfig_SaseService_name = map[int32]string{
	0: "Firewall",
	1: "Nat",
	2: "IpSec",
	3: "Route",
}

var SaseConfig_SaseService_value = map[string]int32{
	"Firewall": 0,
	"Nat":      1,
	"IpSec":    2,
	"Route":    3,
}

func (x SaseConfig_SaseService) String() string {
	return proto.EnumName(SaseConfig_SaseService_name, int32(x))
}

func (SaseConfig_SaseService) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f523e7d7f9b860d, []int{0, 0}
}

// Sase Rule Direction
type SaseConfig_Direction int32

const (
	SaseConfig_Ingress SaseConfig_Direction = 0
	SaseConfig_Egress  SaseConfig_Direction = 1
)

var SaseConfig_Direction_name = map[int32]string{
	0: "Ingress",
	1: "Egress",
}

var SaseConfig_Direction_value = map[string]int32{
	"Ingress": 0,
	"Egress":  1,
}

func (x SaseConfig_Direction) String() string {
	return proto.EnumName(SaseConfig_Direction_name, int32(x))
}

func (SaseConfig_Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f523e7d7f9b860d, []int{0, 1}
}

// Sase Rule action
type SaseConfig_Action int32

const (
	SaseConfig_DENY    SaseConfig_Action = 0
	SaseConfig_PERMIT  SaseConfig_Action = 1
	SaseConfig_NAT     SaseConfig_Action = 2
	SaseConfig_FORWARD SaseConfig_Action = 3
	SaseConfig_SECURE  SaseConfig_Action = 4
)

var SaseConfig_Action_name = map[int32]string{
	0: "DENY",
	1: "PERMIT",
	2: "NAT",
	3: "FORWARD",
	4: "SECURE",
}

var SaseConfig_Action_value = map[string]int32{
	"DENY":    0,
	"PERMIT":  1,
	"NAT":     2,
	"FORWARD": 3,
	"SECURE":  4,
}

func (x SaseConfig_Action) String() string {
	return proto.EnumName(SaseConfig_Action_name, int32(x))
}

func (SaseConfig_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f523e7d7f9b860d, []int{0, 2}
}

// Protocol
type SaseConfig_Match_Proto int32

const (
	SaseConfig_Match_TCP SaseConfig_Match_Proto = 0
	SaseConfig_Match_UDP SaseConfig_Match_Proto = 1
)

var SaseConfig_Match_Proto_name = map[int32]string{
	0: "TCP",
	1: "UDP",
}

var SaseConfig_Match_Proto_value = map[string]int32{
	"TCP": 0,
	"UDP": 1,
}

func (x SaseConfig_Match_Proto) String() string {
	return proto.EnumName(SaseConfig_Match_Proto_name, int32(x))
}

func (SaseConfig_Match_Proto) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f523e7d7f9b860d, []int{0, 0, 0}
}

// SaseConfig is used to store definition of a sase config as a k8s CRD resource.
type SaseConfig struct {
	// Name of the SaseConfig
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Sase Service Name
	SaseService SaseConfig_SaseService `protobuf:"varint,2,opt,name=sase_service,json=saseService,proto3,enum=model.SaseConfig_SaseService" json:"sase_service,omitempty"`
	// Sase Rule Direction
	Direction SaseConfig_Direction `protobuf:"varint,3,opt,name=direction,proto3,enum=model.SaseConfig_Direction" json:"direction,omitempty"`
	// Sase Rule Match condition
	Match *SaseConfig_Match `protobuf:"bytes,4,opt,name=match,proto3" json:"match,omitempty"`
	// Sase Rule action
	Action               SaseConfig_Action `protobuf:"varint,5,opt,name=action,proto3,enum=model.SaseConfig_Action" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SaseConfig) Reset()         { *m = SaseConfig{} }
func (m *SaseConfig) String() string { return proto.CompactTextString(m) }
func (*SaseConfig) ProtoMessage()    {}
func (*SaseConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f523e7d7f9b860d, []int{0}
}
func (m *SaseConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaseConfig.Unmarshal(m, b)
}
func (m *SaseConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaseConfig.Marshal(b, m, deterministic)
}
func (m *SaseConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaseConfig.Merge(m, src)
}
func (m *SaseConfig) XXX_Size() int {
	return xxx_messageInfo_SaseConfig.Size(m)
}
func (m *SaseConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SaseConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SaseConfig proto.InternalMessageInfo

func (m *SaseConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SaseConfig) GetSaseService() SaseConfig_SaseService {
	if m != nil {
		return m.SaseService
	}
	return SaseConfig_Firewall
}

func (m *SaseConfig) GetDirection() SaseConfig_Direction {
	if m != nil {
		return m.Direction
	}
	return SaseConfig_Ingress
}

func (m *SaseConfig) GetMatch() *SaseConfig_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *SaseConfig) GetAction() SaseConfig_Action {
	if m != nil {
		return m.Action
	}
	return SaseConfig_DENY
}

// Sase Rule Match Attribute. 5 tuple match fields
type SaseConfig_Match struct {
	// interface name
	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// ip address to statically assign to the interface
	Ip    string                 `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Proto SaseConfig_Match_Proto `protobuf:"varint,3,opt,name=proto,proto3,enum=model.SaseConfig_Match_Proto" json:"proto,omitempty"`
	// Application Port
	Port                 string   `protobuf:"bytes,4,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaseConfig_Match) Reset()         { *m = SaseConfig_Match{} }
func (m *SaseConfig_Match) String() string { return proto.CompactTextString(m) }
func (*SaseConfig_Match) ProtoMessage()    {}
func (*SaseConfig_Match) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f523e7d7f9b860d, []int{0, 0}
}
func (m *SaseConfig_Match) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaseConfig_Match.Unmarshal(m, b)
}
func (m *SaseConfig_Match) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaseConfig_Match.Marshal(b, m, deterministic)
}
func (m *SaseConfig_Match) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaseConfig_Match.Merge(m, src)
}
func (m *SaseConfig_Match) XXX_Size() int {
	return xxx_messageInfo_SaseConfig_Match.Size(m)
}
func (m *SaseConfig_Match) XXX_DiscardUnknown() {
	xxx_messageInfo_SaseConfig_Match.DiscardUnknown(m)
}

var xxx_messageInfo_SaseConfig_Match proto.InternalMessageInfo

func (m *SaseConfig_Match) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *SaseConfig_Match) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *SaseConfig_Match) GetProto() SaseConfig_Match_Proto {
	if m != nil {
		return m.Proto
	}
	return SaseConfig_Match_TCP
}

func (m *SaseConfig_Match) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func init() {
	proto.RegisterEnum("model.SaseConfig_SaseService", SaseConfig_SaseService_name, SaseConfig_SaseService_value)
	proto.RegisterEnum("model.SaseConfig_Direction", SaseConfig_Direction_name, SaseConfig_Direction_value)
	proto.RegisterEnum("model.SaseConfig_Action", SaseConfig_Action_name, SaseConfig_Action_value)
	proto.RegisterEnum("model.SaseConfig_Match_Proto", SaseConfig_Match_Proto_name, SaseConfig_Match_Proto_value)
	proto.RegisterType((*SaseConfig)(nil), "model.SaseConfig")
	proto.RegisterType((*SaseConfig_Match)(nil), "model.SaseConfig.Match")
}

func init() { proto.RegisterFile("saseconfig.proto", fileDescriptor_8f523e7d7f9b860d) }

var fileDescriptor_8f523e7d7f9b860d = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x5f, 0x8b, 0xda, 0x40,
	0x14, 0xc5, 0x9d, 0xfc, 0xd3, 0xdc, 0x58, 0x19, 0xe6, 0xa5, 0x69, 0x8b, 0x20, 0xa1, 0x05, 0x5f,
	0x1a, 0x8a, 0x3e, 0xb5, 0x4f, 0x8a, 0x89, 0xe0, 0x83, 0x36, 0x4c, 0x94, 0xd2, 0x27, 0x99, 0xc6,
	0xd1, 0x0e, 0x68, 0x12, 0x92, 0xec, 0xee, 0xf7, 0xd9, 0x2f, 0xb3, 0x5f, 0x6b, 0x99, 0x19, 0x57,
	0x05, 0xd9, 0xb7, 0x93, 0xdc, 0xdf, 0xb9, 0x67, 0xee, 0x01, 0x5c, 0xb3, 0x9a, 0x67, 0x45, 0xbe,
	0x17, 0x87, 0xb0, 0xac, 0x8a, 0xa6, 0x20, 0xf6, 0xa9, 0xd8, 0xf1, 0x63, 0xf0, 0x62, 0x01, 0xa4,
	0xac, 0xe6, 0x33, 0x35, 0x23, 0x04, 0xac, 0x9c, 0x9d, 0xb8, 0x8f, 0x06, 0x68, 0xe8, 0x52, 0xa5,
	0xc9, 0x04, 0xba, 0xd2, 0xbd, 0xad, 0x79, 0xf5, 0x28, 0x32, 0xee, 0x1b, 0x03, 0x34, 0xec, 0x8d,
	0xfa, 0xa1, 0x5a, 0x10, 0x5e, 0xcd, 0x4a, 0xa6, 0x1a, 0xa2, 0x5e, 0x7d, 0xfd, 0x20, 0x3f, 0xc1,
	0xdd, 0x89, 0x8a, 0x67, 0x8d, 0x28, 0x72, 0xdf, 0x54, 0xf6, 0x2f, 0xf7, 0xf6, 0xe8, 0x0d, 0xa1,
	0x57, 0x9a, 0x7c, 0x07, 0xfb, 0xc4, 0x9a, 0xec, 0xbf, 0x6f, 0x0d, 0xd0, 0xd0, 0x1b, 0x7d, 0xbc,
	0xb7, 0x2d, 0xe5, 0x98, 0x6a, 0x8a, 0xfc, 0x00, 0x87, 0xe9, 0x18, 0x5b, 0xc5, 0xf8, 0xf7, 0xfc,
	0x54, 0x67, 0x9c, 0xb9, 0xcf, 0xcf, 0x08, 0x6c, 0xb5, 0x82, 0x7c, 0x83, 0x9e, 0xc8, 0x1b, 0x5e,
	0xed, 0x59, 0xc6, 0xb7, 0x37, 0x2d, 0x7c, 0xb8, 0xfc, 0x5d, 0xc9, 0x3a, 0x7a, 0x60, 0x88, 0x52,
	0x95, 0xe0, 0x52, 0x43, 0x94, 0x64, 0x0c, 0xb6, 0x6a, 0xf4, 0x7c, 0x58, 0xff, 0x9d, 0x17, 0x86,
	0x89, 0x84, 0xa8, 0x66, 0x65, 0xcf, 0x65, 0x51, 0x35, 0xea, 0x2a, 0x97, 0x2a, 0x1d, 0x7c, 0x02,
	0x5b, 0x31, 0xa4, 0x0d, 0xe6, 0x7a, 0x96, 0xe0, 0x96, 0x14, 0x9b, 0x28, 0xc1, 0x28, 0xf8, 0x05,
	0xde, 0x4d, 0xb9, 0xa4, 0x0b, 0x9d, 0xb9, 0xa8, 0xf8, 0x13, 0x3b, 0x1e, 0x35, 0xb5, 0x62, 0x0d,
	0x46, 0xc4, 0x05, 0x7b, 0x51, 0xa6, 0x3c, 0xc3, 0x86, 0x94, 0xb4, 0x78, 0x68, 0x38, 0x36, 0x83,
	0xaf, 0xe0, 0x5e, 0x9a, 0x25, 0x1e, 0xb4, 0x17, 0xf9, 0xa1, 0xe2, 0x75, 0x8d, 0x5b, 0x04, 0xc0,
	0x89, 0xb5, 0x46, 0xc1, 0x04, 0x1c, 0x5d, 0x0c, 0xe9, 0x80, 0x15, 0xc5, 0xab, 0xbf, 0x7a, 0x9e,
	0xc4, 0x74, 0xb9, 0x58, 0x63, 0xa4, 0x42, 0xa6, 0x6b, 0x6c, 0xc8, 0x0d, 0xf3, 0xdf, 0xf4, 0xcf,
	0x94, 0x46, 0xd8, 0x94, 0x44, 0x1a, 0xcf, 0x36, 0x34, 0xc6, 0xd6, 0x3f, 0x47, 0x5d, 0x36, 0x7e,
	0x0d, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x04, 0xd7, 0xe8, 0x6b, 0x02, 0x00, 0x00,
}
