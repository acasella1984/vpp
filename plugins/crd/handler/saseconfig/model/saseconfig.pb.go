// Code generated by protoc-gen-go. DO NOT EDIT.
// source: saseconfig.proto

package model

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Sase Rule Direction
type SaseConfig_Direction int32

const (
	SaseConfig_None    SaseConfig_Direction = 0
	SaseConfig_Ingress SaseConfig_Direction = 1
	SaseConfig_Egress  SaseConfig_Direction = 2
)

var SaseConfig_Direction_name = map[int32]string{
	0: "None",
	1: "Ingress",
	2: "Egress",
}

var SaseConfig_Direction_value = map[string]int32{
	"None":    0,
	"Ingress": 1,
	"Egress":  2,
}

func (x SaseConfig_Direction) String() string {
	return proto.EnumName(SaseConfig_Direction_name, int32(x))
}

func (SaseConfig_Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f523e7d7f9b860d, []int{0, 0}
}

// Sase Rule action
type SaseConfig_Action int32

const (
	SaseConfig_NONE    SaseConfig_Action = 0
	SaseConfig_DENY    SaseConfig_Action = 1
	SaseConfig_PERMIT  SaseConfig_Action = 2
	SaseConfig_SNAT    SaseConfig_Action = 3
	SaseConfig_DNAT    SaseConfig_Action = 4
	SaseConfig_FORWARD SaseConfig_Action = 5
	SaseConfig_SECURE  SaseConfig_Action = 6
)

var SaseConfig_Action_name = map[int32]string{
	0: "NONE",
	1: "DENY",
	2: "PERMIT",
	3: "SNAT",
	4: "DNAT",
	5: "FORWARD",
	6: "SECURE",
}

var SaseConfig_Action_value = map[string]int32{
	"NONE":    0,
	"DENY":    1,
	"PERMIT":  2,
	"SNAT":    3,
	"DNAT":    4,
	"FORWARD": 5,
	"SECURE":  6,
}

func (x SaseConfig_Action) String() string {
	return proto.EnumName(SaseConfig_Action_name, int32(x))
}

func (SaseConfig_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f523e7d7f9b860d, []int{0, 1}
}

// Protocol
type SaseConfig_Match_Proto int32

const (
	SaseConfig_Match_NONE SaseConfig_Match_Proto = 0
	SaseConfig_Match_TCP  SaseConfig_Match_Proto = 1
	SaseConfig_Match_UDP  SaseConfig_Match_Proto = 2
)

var SaseConfig_Match_Proto_name = map[int32]string{
	0: "NONE",
	1: "TCP",
	2: "UDP",
}

var SaseConfig_Match_Proto_value = map[string]int32{
	"NONE": 0,
	"TCP":  1,
	"UDP":  2,
}

func (x SaseConfig_Match_Proto) String() string {
	return proto.EnumName(SaseConfig_Match_Proto_name, int32(x))
}

func (SaseConfig_Match_Proto) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f523e7d7f9b860d, []int{0, 0, 0}
}

// SaseConfig is used to store definition of a sase config as a k8s CRD resource.
type SaseConfig struct {
	// Name of the SaseConfig
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Sase Service Instance Name
	ServiceInstanceName string `protobuf:"bytes,2,opt,name=service_instance_name,json=serviceInstanceName,proto3" json:"service_instance_name,omitempty"`
	// Sase Rule Direction
	Direction SaseConfig_Direction `protobuf:"varint,3,opt,name=direction,proto3,enum=model.SaseConfig_Direction" json:"direction,omitempty"`
	// Sase Rule Match condition
	Match *SaseConfig_Match `protobuf:"bytes,4,opt,name=match,proto3" json:"match,omitempty"`
	// Sase Rule action
	Action               SaseConfig_Action `protobuf:"varint,5,opt,name=action,proto3,enum=model.SaseConfig_Action" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SaseConfig) Reset()         { *m = SaseConfig{} }
func (m *SaseConfig) String() string { return proto.CompactTextString(m) }
func (*SaseConfig) ProtoMessage()    {}
func (*SaseConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f523e7d7f9b860d, []int{0}
}

func (m *SaseConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaseConfig.Unmarshal(m, b)
}
func (m *SaseConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaseConfig.Marshal(b, m, deterministic)
}
func (m *SaseConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaseConfig.Merge(m, src)
}
func (m *SaseConfig) XXX_Size() int {
	return xxx_messageInfo_SaseConfig.Size(m)
}
func (m *SaseConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SaseConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SaseConfig proto.InternalMessageInfo

func (m *SaseConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SaseConfig) GetServiceInstanceName() string {
	if m != nil {
		return m.ServiceInstanceName
	}
	return ""
}

func (m *SaseConfig) GetDirection() SaseConfig_Direction {
	if m != nil {
		return m.Direction
	}
	return SaseConfig_None
}

func (m *SaseConfig) GetMatch() *SaseConfig_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *SaseConfig) GetAction() SaseConfig_Action {
	if m != nil {
		return m.Action
	}
	return SaseConfig_NONE
}

// Sase Rule Match Attribute.
type SaseConfig_Match struct {
	// ingress interface name
	IngressInterfaceName string `protobuf:"bytes,1,opt,name=ingress_interface_name,json=ingressInterfaceName,proto3" json:"ingress_interface_name,omitempty"`
	// egress interface name
	EgressInterfaceName string `protobuf:"bytes,2,opt,name=egress_interface_name,json=egressInterfaceName,proto3" json:"egress_interface_name,omitempty"`
	// source mac address
	SourceMac string `protobuf:"bytes,3,opt,name=source_mac,json=sourceMac,proto3" json:"source_mac,omitempty"`
	// source ip address
	SourceIp string `protobuf:"bytes,4,opt,name=source_ip,json=sourceIp,proto3" json:"source_ip,omitempty"`
	// destination mac address
	DestinationMac string `protobuf:"bytes,5,opt,name=destination_mac,json=destinationMac,proto3" json:"destination_mac,omitempty"`
	// destination ip address
	DestinationIp string                 `protobuf:"bytes,6,opt,name=destination_ip,json=destinationIp,proto3" json:"destination_ip,omitempty"`
	Protocol      SaseConfig_Match_Proto `protobuf:"varint,7,opt,name=protocol,proto3,enum=model.SaseConfig_Match_Proto" json:"protocol,omitempty"`
	// Application Port
	ProtocolPort         uint32   `protobuf:"varint,8,opt,name=protocol_port,json=protocolPort,proto3" json:"protocol_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaseConfig_Match) Reset()         { *m = SaseConfig_Match{} }
func (m *SaseConfig_Match) String() string { return proto.CompactTextString(m) }
func (*SaseConfig_Match) ProtoMessage()    {}
func (*SaseConfig_Match) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f523e7d7f9b860d, []int{0, 0}
}

func (m *SaseConfig_Match) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaseConfig_Match.Unmarshal(m, b)
}
func (m *SaseConfig_Match) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaseConfig_Match.Marshal(b, m, deterministic)
}
func (m *SaseConfig_Match) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaseConfig_Match.Merge(m, src)
}
func (m *SaseConfig_Match) XXX_Size() int {
	return xxx_messageInfo_SaseConfig_Match.Size(m)
}
func (m *SaseConfig_Match) XXX_DiscardUnknown() {
	xxx_messageInfo_SaseConfig_Match.DiscardUnknown(m)
}

var xxx_messageInfo_SaseConfig_Match proto.InternalMessageInfo

func (m *SaseConfig_Match) GetIngressInterfaceName() string {
	if m != nil {
		return m.IngressInterfaceName
	}
	return ""
}

func (m *SaseConfig_Match) GetEgressInterfaceName() string {
	if m != nil {
		return m.EgressInterfaceName
	}
	return ""
}

func (m *SaseConfig_Match) GetSourceMac() string {
	if m != nil {
		return m.SourceMac
	}
	return ""
}

func (m *SaseConfig_Match) GetSourceIp() string {
	if m != nil {
		return m.SourceIp
	}
	return ""
}

func (m *SaseConfig_Match) GetDestinationMac() string {
	if m != nil {
		return m.DestinationMac
	}
	return ""
}

func (m *SaseConfig_Match) GetDestinationIp() string {
	if m != nil {
		return m.DestinationIp
	}
	return ""
}

func (m *SaseConfig_Match) GetProtocol() SaseConfig_Match_Proto {
	if m != nil {
		return m.Protocol
	}
	return SaseConfig_Match_NONE
}

func (m *SaseConfig_Match) GetProtocolPort() uint32 {
	if m != nil {
		return m.ProtocolPort
	}
	return 0
}

func init() {
	proto.RegisterEnum("model.SaseConfig_Direction", SaseConfig_Direction_name, SaseConfig_Direction_value)
	proto.RegisterEnum("model.SaseConfig_Action", SaseConfig_Action_name, SaseConfig_Action_value)
	proto.RegisterEnum("model.SaseConfig_Match_Proto", SaseConfig_Match_Proto_name, SaseConfig_Match_Proto_value)
	proto.RegisterType((*SaseConfig)(nil), "model.SaseConfig")
	proto.RegisterType((*SaseConfig_Match)(nil), "model.SaseConfig.Match")
}

func init() {
	proto.RegisterFile("saseconfig.proto", fileDescriptor_8f523e7d7f9b860d)
}

var fileDescriptor_8f523e7d7f9b860d = []byte{
	// 453 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x4f, 0x6b, 0xdb, 0x4c,
	0x10, 0xc6, 0x23, 0x5b, 0x92, 0xa5, 0xc9, 0xeb, 0xbc, 0xcb, 0xf6, 0x9f, 0x68, 0x08, 0x18, 0x87,
	0x52, 0x5f, 0x2a, 0x8a, 0xdb, 0x4b, 0x8e, 0xc6, 0x56, 0x41, 0x07, 0x2b, 0x62, 0x6d, 0x53, 0x7a,
	0x12, 0x5b, 0x79, 0x93, 0x0a, 0xe2, 0x5d, 0xa1, 0x55, 0xfb, 0x01, 0xfa, 0xb9, 0x7b, 0x28, 0x3b,
	0x2b, 0xc5, 0x86, 0xa4, 0xb7, 0xf1, 0xf3, 0xfc, 0x66, 0x66, 0xe7, 0xb1, 0x80, 0x68, 0xae, 0x45,
	0xa9, 0xe4, 0x5d, 0x75, 0x1f, 0xd7, 0x8d, 0x6a, 0x15, 0xf5, 0x0e, 0x6a, 0x2f, 0x1e, 0xa6, 0x7f,
	0x3c, 0x80, 0x0d, 0xd7, 0x62, 0x89, 0x1e, 0xa5, 0xe0, 0x4a, 0x7e, 0x10, 0x91, 0x33, 0x71, 0x66,
	0x21, 0xc3, 0x9a, 0xce, 0xe1, 0x95, 0x16, 0xcd, 0xaf, 0xaa, 0x14, 0x45, 0x25, 0x75, 0xcb, 0x65,
	0x29, 0x0a, 0x84, 0x06, 0x08, 0xbd, 0xe8, 0xcc, 0xb4, 0xf3, 0x32, 0xd3, 0x73, 0x03, 0xe1, 0xbe,
	0x6a, 0x44, 0xd9, 0x56, 0x4a, 0x46, 0xc3, 0x89, 0x33, 0xbb, 0x98, 0x5f, 0xc6, 0xb8, 0x31, 0x3e,
	0x6e, 0x8b, 0x57, 0x3d, 0xc2, 0x8e, 0x34, 0xfd, 0x00, 0xde, 0x81, 0xb7, 0xe5, 0x8f, 0xc8, 0x9d,
	0x38, 0xb3, 0xf3, 0xf9, 0x9b, 0xa7, 0x6d, 0x6b, 0x63, 0x33, 0x4b, 0xd1, 0x8f, 0xe0, 0x73, 0xbb,
	0xc6, 0xc3, 0x35, 0xd1, 0x53, 0x7e, 0x61, 0x77, 0x74, 0xdc, 0xdb, 0xdf, 0x43, 0xf0, 0x70, 0x04,
	0xfd, 0x0c, 0xaf, 0x2b, 0x79, 0xdf, 0x08, 0xad, 0x8b, 0x4a, 0xb6, 0xa2, 0xb9, 0xe3, 0xfd, 0x69,
	0xf6, 0xfe, 0x97, 0x9d, 0x9b, 0xf6, 0x66, 0xd6, 0xe5, 0x21, 0x9e, 0x6d, 0xea, 0xf2, 0x10, 0xcf,
	0xf4, 0x5c, 0x01, 0x68, 0xf5, 0xb3, 0x29, 0x45, 0x71, 0xe0, 0x25, 0x06, 0x12, 0xb2, 0xd0, 0x2a,
	0x6b, 0x5e, 0xd2, 0x4b, 0xe8, 0x7e, 0x14, 0x55, 0x8d, 0x77, 0x87, 0x2c, 0xb0, 0x42, 0x5a, 0xd3,
	0xf7, 0xf0, 0xff, 0x5e, 0xe8, 0xb6, 0x92, 0xdc, 0x3c, 0x1f, 0x07, 0x78, 0x88, 0x5c, 0x9c, 0xc8,
	0x66, 0xca, 0x3b, 0x38, 0x55, 0xcc, 0x28, 0x1f, 0xb9, 0xf1, 0x89, 0x9a, 0xd6, 0xf4, 0x06, 0x02,
	0xfc, 0x04, 0x4a, 0xf5, 0x10, 0x8d, 0x30, 0xb3, 0xab, 0x7f, 0x64, 0x1c, 0xe7, 0x86, 0x63, 0x8f,
	0x38, 0xbd, 0x86, 0x71, 0x5f, 0x17, 0xb5, 0x6a, 0xda, 0x28, 0x98, 0x38, 0xb3, 0x31, 0xfb, 0xaf,
	0x17, 0x73, 0xd5, 0xb4, 0xd3, 0x6b, 0xf0, 0xb0, 0x8f, 0x06, 0xe0, 0x66, 0xb7, 0x59, 0x42, 0xce,
	0xe8, 0x08, 0x86, 0xdb, 0x65, 0x4e, 0x1c, 0x53, 0xec, 0x56, 0x39, 0x19, 0x4c, 0x63, 0x08, 0x1f,
	0xff, 0x7d, 0x04, 0x95, 0x14, 0xe4, 0x8c, 0x9e, 0xc3, 0x28, 0xb5, 0x99, 0x13, 0x87, 0x02, 0xf8,
	0x89, 0xad, 0x07, 0xd3, 0x1d, 0xf8, 0x8b, 0x23, 0x6c, 0xa7, 0x06, 0xe0, 0xae, 0x92, 0xec, 0x9b,
	0x25, 0xf3, 0x84, 0xad, 0xd3, 0x2d, 0x19, 0x18, 0x75, 0x93, 0x2d, 0xb6, 0x64, 0x88, 0xbe, 0xa9,
	0x5c, 0x33, 0xf6, 0xcb, 0x2d, 0xfb, 0xba, 0x60, 0x2b, 0xe2, 0x19, 0x78, 0x93, 0x2c, 0x77, 0x2c,
	0x21, 0xfe, 0x77, 0x1f, 0x5f, 0xfe, 0xe9, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x98, 0xd3,
	0xe1, 0x20, 0x03, 0x00, 0x00,
}
