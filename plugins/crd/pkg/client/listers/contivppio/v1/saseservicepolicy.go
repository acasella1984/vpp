// Copyright (c) 2018 Cisco and/or its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/contiv/vpp/plugins/crd/pkg/apis/contivppio/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SaseServicePolicyLister helps list SaseServicePolicies.
type SaseServicePolicyLister interface {
	// List lists all SaseServicePolicies in the indexer.
	List(selector labels.Selector) (ret []*v1.SaseServicePolicy, err error)
	// SaseServicePolicies returns an object that can list and get SaseServicePolicies.
	SaseServicePolicies(namespace string) SaseServicePolicyNamespaceLister
	SaseServicePolicyListerExpansion
}

// saseServicePolicyLister implements the SaseServicePolicyLister interface.
type saseServicePolicyLister struct {
	indexer cache.Indexer
}

// NewSaseServicePolicyLister returns a new SaseServicePolicyLister.
func NewSaseServicePolicyLister(indexer cache.Indexer) SaseServicePolicyLister {
	return &saseServicePolicyLister{indexer: indexer}
}

// List lists all SaseServicePolicies in the indexer.
func (s *saseServicePolicyLister) List(selector labels.Selector) (ret []*v1.SaseServicePolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SaseServicePolicy))
	})
	return ret, err
}

// SaseServicePolicies returns an object that can list and get SaseServicePolicies.
func (s *saseServicePolicyLister) SaseServicePolicies(namespace string) SaseServicePolicyNamespaceLister {
	return saseServicePolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SaseServicePolicyNamespaceLister helps list and get SaseServicePolicies.
type SaseServicePolicyNamespaceLister interface {
	// List lists all SaseServicePolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.SaseServicePolicy, err error)
	// Get retrieves the SaseServicePolicy from the indexer for a given namespace and name.
	Get(name string) (*v1.SaseServicePolicy, error)
	SaseServicePolicyNamespaceListerExpansion
}

// saseServicePolicyNamespaceLister implements the SaseServicePolicyNamespaceLister
// interface.
type saseServicePolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SaseServicePolicies in the indexer for a given namespace.
func (s saseServicePolicyNamespaceLister) List(selector labels.Selector) (ret []*v1.SaseServicePolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SaseServicePolicy))
	})
	return ret, err
}

// Get retrieves the SaseServicePolicy from the indexer for a given namespace and name.
func (s saseServicePolicyNamespaceLister) Get(name string) (*v1.SaseServicePolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("saseservicepolicy"), name)
	}
	return obj.(*v1.SaseServicePolicy), nil
}
